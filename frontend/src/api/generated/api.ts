/* tslint:disable */
/* eslint-disable */
/**
 * Kuefa-API
 * This is the Rest-API specification for server-side API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ErrorResponseData
 */
export interface ErrorResponseData {
    /**
     * Additional data to describe the error
     * @type {{ [key: string]: object; }}
     * @memberof ErrorResponseData
     */
    'additionalAttributes'?: { [key: string]: object; };
    /**
     * Human-readable description of the error
     * @type {string}
     * @memberof ErrorResponseData
     */
    'description': string;
    /**
     * Generic code to detect kind of error
     * @type {string}
     * @memberof ErrorResponseData
     */
    'errorCode': string;
}
/**
 * 
 * @export
 * @interface UploadImageResponseData
 */
export interface UploadImageResponseData {
    /**
     * Generated v4 UUID of the image
     * @type {string}
     * @memberof UploadImageResponseData
     */
    'id': string;
    /**
     * Relative URL to access the image
     * @type {string}
     * @memberof UploadImageResponseData
     */
    'imageURL': string;
    /**
     * Relative URL to access the thumbnail
     * @type {string}
     * @memberof UploadImageResponseData
     */
    'thumbnailURL': string;
}

/**
 * KuefaApi - axios parameter creator
 * @export
 */
export const KuefaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * It is automatically served on /public/images/{id}. There is also a thumbnail being generated on /public/thumbnails/{id}.
         * @summary Upload an image.
         * @param {any} image 
         * @param {boolean} [isTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImage: async (image: any, isTitle?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('uploadImage', 'image', image)
            const localVarPath = `/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (isTitle !== undefined) { 
                localVarFormParams.append('isTitle', isTitle as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KuefaApi - functional programming interface
 * @export
 */
export const KuefaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KuefaApiAxiosParamCreator(configuration)
    return {
        /**
         * It is automatically served on /public/images/{id}. There is also a thumbnail being generated on /public/thumbnails/{id}.
         * @summary Upload an image.
         * @param {any} image 
         * @param {boolean} [isTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadImage(image: any, isTitle?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadImageResponseData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImage(image, isTitle, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KuefaApi - factory interface
 * @export
 */
export const KuefaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KuefaApiFp(configuration)
    return {
        /**
         * It is automatically served on /public/images/{id}. There is also a thumbnail being generated on /public/thumbnails/{id}.
         * @summary Upload an image.
         * @param {any} image 
         * @param {boolean} [isTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImage(image: any, isTitle?: boolean, options?: any): AxiosPromise<UploadImageResponseData> {
            return localVarFp.uploadImage(image, isTitle, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KuefaApi - object-oriented interface
 * @export
 * @class KuefaApi
 * @extends {BaseAPI}
 */
export class KuefaApi extends BaseAPI {
    /**
     * It is automatically served on /public/images/{id}. There is also a thumbnail being generated on /public/thumbnails/{id}.
     * @summary Upload an image.
     * @param {any} image 
     * @param {boolean} [isTitle] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuefaApi
     */
    public uploadImage(image: any, isTitle?: boolean, options?: AxiosRequestConfig) {
        return KuefaApiFp(this.configuration).uploadImage(image, isTitle, options).then((request) => request(this.axios, this.basePath));
    }
}


