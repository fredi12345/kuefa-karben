// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fredi12345/kuefa-karben/src/ent/event"
	"github.com/fredi12345/kuefa-karben/src/ent/participant"
	"github.com/google/uuid"
)

// ParticipantCreate is the builder for creating a Participant entity.
type ParticipantCreate struct {
	config
	mutation *ParticipantMutation
	hooks    []Hook
}

// SetCreated sets the "created" field.
func (pc *ParticipantCreate) SetCreated(t time.Time) *ParticipantCreate {
	pc.mutation.SetCreated(t)
	return pc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (pc *ParticipantCreate) SetNillableCreated(t *time.Time) *ParticipantCreate {
	if t != nil {
		pc.SetCreated(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ParticipantCreate) SetName(s string) *ParticipantCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetMessage sets the "message" field.
func (pc *ParticipantCreate) SetMessage(s string) *ParticipantCreate {
	pc.mutation.SetMessage(s)
	return pc
}

// SetClassicMenu sets the "classic_menu" field.
func (pc *ParticipantCreate) SetClassicMenu(i int) *ParticipantCreate {
	pc.mutation.SetClassicMenu(i)
	return pc
}

// SetVegetarianMenu sets the "vegetarian_menu" field.
func (pc *ParticipantCreate) SetVegetarianMenu(i int) *ParticipantCreate {
	pc.mutation.SetVegetarianMenu(i)
	return pc
}

// SetVeganMenu sets the "vegan_menu" field.
func (pc *ParticipantCreate) SetVeganMenu(i int) *ParticipantCreate {
	pc.mutation.SetVeganMenu(i)
	return pc
}

// SetID sets the "id" field.
func (pc *ParticipantCreate) SetID(u uuid.UUID) *ParticipantCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ParticipantCreate) SetNillableID(u *uuid.UUID) *ParticipantCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (pc *ParticipantCreate) SetEventID(id uuid.UUID) *ParticipantCreate {
	pc.mutation.SetEventID(id)
	return pc
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (pc *ParticipantCreate) SetNillableEventID(id *uuid.UUID) *ParticipantCreate {
	if id != nil {
		pc = pc.SetEventID(*id)
	}
	return pc
}

// SetEvent sets the "event" edge to the Event entity.
func (pc *ParticipantCreate) SetEvent(e *Event) *ParticipantCreate {
	return pc.SetEventID(e.ID)
}

// Mutation returns the ParticipantMutation object of the builder.
func (pc *ParticipantCreate) Mutation() *ParticipantMutation {
	return pc.mutation
}

// Save creates the Participant in the database.
func (pc *ParticipantCreate) Save(ctx context.Context) (*Participant, error) {
	var (
		err  error
		node *Participant
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ParticipantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ParticipantCreate) SaveX(ctx context.Context) *Participant {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ParticipantCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ParticipantCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ParticipantCreate) defaults() {
	if _, ok := pc.mutation.Created(); !ok {
		v := participant.DefaultCreated()
		pc.mutation.SetCreated(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := participant.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ParticipantCreate) check() error {
	if _, ok := pc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "Participant.created"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Participant.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := participant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Participant.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "Participant.message"`)}
	}
	if v, ok := pc.mutation.Message(); ok {
		if err := participant.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Participant.message": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ClassicMenu(); !ok {
		return &ValidationError{Name: "classic_menu", err: errors.New(`ent: missing required field "Participant.classic_menu"`)}
	}
	if v, ok := pc.mutation.ClassicMenu(); ok {
		if err := participant.ClassicMenuValidator(v); err != nil {
			return &ValidationError{Name: "classic_menu", err: fmt.Errorf(`ent: validator failed for field "Participant.classic_menu": %w`, err)}
		}
	}
	if _, ok := pc.mutation.VegetarianMenu(); !ok {
		return &ValidationError{Name: "vegetarian_menu", err: errors.New(`ent: missing required field "Participant.vegetarian_menu"`)}
	}
	if v, ok := pc.mutation.VegetarianMenu(); ok {
		if err := participant.VegetarianMenuValidator(v); err != nil {
			return &ValidationError{Name: "vegetarian_menu", err: fmt.Errorf(`ent: validator failed for field "Participant.vegetarian_menu": %w`, err)}
		}
	}
	if _, ok := pc.mutation.VeganMenu(); !ok {
		return &ValidationError{Name: "vegan_menu", err: errors.New(`ent: missing required field "Participant.vegan_menu"`)}
	}
	if v, ok := pc.mutation.VeganMenu(); ok {
		if err := participant.VeganMenuValidator(v); err != nil {
			return &ValidationError{Name: "vegan_menu", err: fmt.Errorf(`ent: validator failed for field "Participant.vegan_menu": %w`, err)}
		}
	}
	return nil
}

func (pc *ParticipantCreate) sqlSave(ctx context.Context) (*Participant, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pc *ParticipantCreate) createSpec() (*Participant, *sqlgraph.CreateSpec) {
	var (
		_node = &Participant{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: participant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: participant.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Created(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: participant.FieldCreated,
		})
		_node.Created = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: participant.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: participant.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := pc.mutation.ClassicMenu(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: participant.FieldClassicMenu,
		})
		_node.ClassicMenu = value
	}
	if value, ok := pc.mutation.VegetarianMenu(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: participant.FieldVegetarianMenu,
		})
		_node.VegetarianMenu = value
	}
	if value, ok := pc.mutation.VeganMenu(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: participant.FieldVeganMenu,
		})
		_node.VeganMenu = value
	}
	if nodes := pc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participant.EventTable,
			Columns: []string{participant.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_participants = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ParticipantCreateBulk is the builder for creating many Participant entities in bulk.
type ParticipantCreateBulk struct {
	config
	builders []*ParticipantCreate
}

// Save creates the Participant entities in the database.
func (pcb *ParticipantCreateBulk) Save(ctx context.Context) ([]*Participant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Participant, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ParticipantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ParticipantCreateBulk) SaveX(ctx context.Context) []*Participant {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ParticipantCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ParticipantCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
