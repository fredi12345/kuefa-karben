// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/fredi12345/kuefa-karben/src/ent/event"
	"github.com/fredi12345/kuefa-karben/src/ent/participant"
	"github.com/google/uuid"
)

// Participant is the model entity for the Participant schema.
type Participant struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Menu holds the value of the "menu" field.
	Menu participant.Menu `json:"menu,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParticipantQuery when eager-loading is set.
	Edges              ParticipantEdges `json:"edges"`
	event_participants *uuid.UUID
}

// ParticipantEdges holds the relations/edges for other nodes in the graph.
type ParticipantEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParticipantEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Participant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case participant.FieldName, participant.FieldMessage, participant.FieldMenu:
			values[i] = new(sql.NullString)
		case participant.FieldCreated:
			values[i] = new(sql.NullTime)
		case participant.FieldID:
			values[i] = new(uuid.UUID)
		case participant.ForeignKeys[0]: // event_participants
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Participant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Participant fields.
func (pa *Participant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case participant.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case participant.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				pa.Created = value.Time
			}
		case participant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case participant.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				pa.Message = value.String
			}
		case participant.FieldMenu:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field menu", values[i])
			} else if value.Valid {
				pa.Menu = participant.Menu(value.String)
			}
		case participant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field event_participants", values[i])
			} else if value.Valid {
				pa.event_participants = new(uuid.UUID)
				*pa.event_participants = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the Participant entity.
func (pa *Participant) QueryEvent() *EventQuery {
	return (&ParticipantClient{config: pa.config}).QueryEvent(pa)
}

// Update returns a builder for updating this Participant.
// Note that you need to call Participant.Unwrap() before calling this method if this Participant
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Participant) Update() *ParticipantUpdateOne {
	return (&ParticipantClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Participant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Participant) Unwrap() *Participant {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Participant is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Participant) String() string {
	var builder strings.Builder
	builder.WriteString("Participant(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", created=")
	builder.WriteString(pa.Created.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", message=")
	builder.WriteString(pa.Message)
	builder.WriteString(", menu=")
	builder.WriteString(fmt.Sprintf("%v", pa.Menu))
	builder.WriteByte(')')
	return builder.String()
}

// Participants is a parsable slice of Participant.
type Participants []*Participant

func (pa Participants) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
