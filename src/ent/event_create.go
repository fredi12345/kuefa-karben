// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fredi12345/kuefa-karben/src/ent/comment"
	"github.com/fredi12345/kuefa-karben/src/ent/event"
	"github.com/fredi12345/kuefa-karben/src/ent/image"
	"github.com/fredi12345/kuefa-karben/src/ent/participant"
	"github.com/fredi12345/kuefa-karben/src/ent/titleimage"
	"github.com/google/uuid"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
}

// SetCreated sets the "created" field.
func (ec *EventCreate) SetCreated(t time.Time) *EventCreate {
	ec.mutation.SetCreated(t)
	return ec
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (ec *EventCreate) SetNillableCreated(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetCreated(*t)
	}
	return ec
}

// SetLastModified sets the "last_modified" field.
func (ec *EventCreate) SetLastModified(t time.Time) *EventCreate {
	ec.mutation.SetLastModified(t)
	return ec
}

// SetNillableLastModified sets the "last_modified" field if the given value is not nil.
func (ec *EventCreate) SetNillableLastModified(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetLastModified(*t)
	}
	return ec
}

// SetTheme sets the "theme" field.
func (ec *EventCreate) SetTheme(s string) *EventCreate {
	ec.mutation.SetTheme(s)
	return ec
}

// SetStartingTime sets the "starting_time" field.
func (ec *EventCreate) SetStartingTime(t time.Time) *EventCreate {
	ec.mutation.SetStartingTime(t)
	return ec
}

// SetClosingTime sets the "closing_time" field.
func (ec *EventCreate) SetClosingTime(t time.Time) *EventCreate {
	ec.mutation.SetClosingTime(t)
	return ec
}

// SetStarter sets the "starter" field.
func (ec *EventCreate) SetStarter(s string) *EventCreate {
	ec.mutation.SetStarter(s)
	return ec
}

// SetMainDish sets the "main_dish" field.
func (ec *EventCreate) SetMainDish(s string) *EventCreate {
	ec.mutation.SetMainDish(s)
	return ec
}

// SetDessert sets the "dessert" field.
func (ec *EventCreate) SetDessert(s string) *EventCreate {
	ec.mutation.SetDessert(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *EventCreate) SetDescription(s string) *EventCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetID sets the "id" field.
func (ec *EventCreate) SetID(u uuid.UUID) *EventCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EventCreate) SetNillableID(u *uuid.UUID) *EventCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// AddParticipantIDs adds the "participants" edge to the Participant entity by IDs.
func (ec *EventCreate) AddParticipantIDs(ids ...uuid.UUID) *EventCreate {
	ec.mutation.AddParticipantIDs(ids...)
	return ec
}

// AddParticipants adds the "participants" edges to the Participant entity.
func (ec *EventCreate) AddParticipants(p ...*Participant) *EventCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddParticipantIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (ec *EventCreate) AddCommentIDs(ids ...uuid.UUID) *EventCreate {
	ec.mutation.AddCommentIDs(ids...)
	return ec
}

// AddComments adds the "comments" edges to the Comment entity.
func (ec *EventCreate) AddComments(c ...*Comment) *EventCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ec.AddCommentIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (ec *EventCreate) AddImageIDs(ids ...uuid.UUID) *EventCreate {
	ec.mutation.AddImageIDs(ids...)
	return ec
}

// AddImages adds the "images" edges to the Image entity.
func (ec *EventCreate) AddImages(i ...*Image) *EventCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ec.AddImageIDs(ids...)
}

// SetTitleImageID sets the "title_image" edge to the TitleImage entity by ID.
func (ec *EventCreate) SetTitleImageID(id uuid.UUID) *EventCreate {
	ec.mutation.SetTitleImageID(id)
	return ec
}

// SetNillableTitleImageID sets the "title_image" edge to the TitleImage entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableTitleImageID(id *uuid.UUID) *EventCreate {
	if id != nil {
		ec = ec.SetTitleImageID(*id)
	}
	return ec
}

// SetTitleImage sets the "title_image" edge to the TitleImage entity.
func (ec *EventCreate) SetTitleImage(t *TitleImage) *EventCreate {
	return ec.SetTitleImageID(t.ID)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	var (
		err  error
		node *Event
	)
	ec.defaults()
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() {
	if _, ok := ec.mutation.Created(); !ok {
		v := event.DefaultCreated()
		ec.mutation.SetCreated(v)
	}
	if _, ok := ec.mutation.LastModified(); !ok {
		v := event.DefaultLastModified()
		ec.mutation.SetLastModified(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := event.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "Event.created"`)}
	}
	if _, ok := ec.mutation.LastModified(); !ok {
		return &ValidationError{Name: "last_modified", err: errors.New(`ent: missing required field "Event.last_modified"`)}
	}
	if _, ok := ec.mutation.Theme(); !ok {
		return &ValidationError{Name: "theme", err: errors.New(`ent: missing required field "Event.theme"`)}
	}
	if v, ok := ec.mutation.Theme(); ok {
		if err := event.ThemeValidator(v); err != nil {
			return &ValidationError{Name: "theme", err: fmt.Errorf(`ent: validator failed for field "Event.theme": %w`, err)}
		}
	}
	if _, ok := ec.mutation.StartingTime(); !ok {
		return &ValidationError{Name: "starting_time", err: errors.New(`ent: missing required field "Event.starting_time"`)}
	}
	if _, ok := ec.mutation.ClosingTime(); !ok {
		return &ValidationError{Name: "closing_time", err: errors.New(`ent: missing required field "Event.closing_time"`)}
	}
	if _, ok := ec.mutation.Starter(); !ok {
		return &ValidationError{Name: "starter", err: errors.New(`ent: missing required field "Event.starter"`)}
	}
	if v, ok := ec.mutation.Starter(); ok {
		if err := event.StarterValidator(v); err != nil {
			return &ValidationError{Name: "starter", err: fmt.Errorf(`ent: validator failed for field "Event.starter": %w`, err)}
		}
	}
	if _, ok := ec.mutation.MainDish(); !ok {
		return &ValidationError{Name: "main_dish", err: errors.New(`ent: missing required field "Event.main_dish"`)}
	}
	if v, ok := ec.mutation.MainDish(); ok {
		if err := event.MainDishValidator(v); err != nil {
			return &ValidationError{Name: "main_dish", err: fmt.Errorf(`ent: validator failed for field "Event.main_dish": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Dessert(); !ok {
		return &ValidationError{Name: "dessert", err: errors.New(`ent: missing required field "Event.dessert"`)}
	}
	if v, ok := ec.mutation.Dessert(); ok {
		if err := event.DessertValidator(v); err != nil {
			return &ValidationError{Name: "dessert", err: fmt.Errorf(`ent: validator failed for field "Event.dessert": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Event.description"`)}
	}
	if v, ok := ec.mutation.Description(); ok {
		if err := event.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Event.description": %w`, err)}
		}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: event.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: event.FieldID,
			},
		}
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.Created(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldCreated,
		})
		_node.Created = value
	}
	if value, ok := ec.mutation.LastModified(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldLastModified,
		})
		_node.LastModified = value
	}
	if value, ok := ec.mutation.Theme(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldTheme,
		})
		_node.Theme = value
	}
	if value, ok := ec.mutation.StartingTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldStartingTime,
		})
		_node.StartingTime = value
	}
	if value, ok := ec.mutation.ClosingTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldClosingTime,
		})
		_node.ClosingTime = value
	}
	if value, ok := ec.mutation.Starter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldStarter,
		})
		_node.Starter = value
	}
	if value, ok := ec.mutation.MainDish(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldMainDish,
		})
		_node.MainDish = value
	}
	if value, ok := ec.mutation.Dessert(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldDessert,
		})
		_node.Dessert = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := ec.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ImagesTable,
			Columns: []string{event.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TitleImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TitleImageTable,
			Columns: []string{event.TitleImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: titleimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_title_image = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	builders []*EventCreate
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
