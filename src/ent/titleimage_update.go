// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fredi12345/kuefa-karben/src/ent/event"
	"github.com/fredi12345/kuefa-karben/src/ent/predicate"
	"github.com/fredi12345/kuefa-karben/src/ent/titleimage"
	"github.com/google/uuid"
)

// TitleImageUpdate is the builder for updating TitleImage entities.
type TitleImageUpdate struct {
	config
	hooks    []Hook
	mutation *TitleImageMutation
}

// Where appends a list predicates to the TitleImageUpdate builder.
func (tiu *TitleImageUpdate) Where(ps ...predicate.TitleImage) *TitleImageUpdate {
	tiu.mutation.Where(ps...)
	return tiu
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (tiu *TitleImageUpdate) SetEventID(id uuid.UUID) *TitleImageUpdate {
	tiu.mutation.SetEventID(id)
	return tiu
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (tiu *TitleImageUpdate) SetNillableEventID(id *uuid.UUID) *TitleImageUpdate {
	if id != nil {
		tiu = tiu.SetEventID(*id)
	}
	return tiu
}

// SetEvent sets the "event" edge to the Event entity.
func (tiu *TitleImageUpdate) SetEvent(e *Event) *TitleImageUpdate {
	return tiu.SetEventID(e.ID)
}

// Mutation returns the TitleImageMutation object of the builder.
func (tiu *TitleImageUpdate) Mutation() *TitleImageMutation {
	return tiu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (tiu *TitleImageUpdate) ClearEvent() *TitleImageUpdate {
	tiu.mutation.ClearEvent()
	return tiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tiu *TitleImageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tiu.hooks) == 0 {
		affected, err = tiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TitleImageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tiu.mutation = mutation
			affected, err = tiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tiu.hooks) - 1; i >= 0; i-- {
			if tiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tiu *TitleImageUpdate) SaveX(ctx context.Context) int {
	affected, err := tiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tiu *TitleImageUpdate) Exec(ctx context.Context) error {
	_, err := tiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiu *TitleImageUpdate) ExecX(ctx context.Context) {
	if err := tiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tiu *TitleImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   titleimage.Table,
			Columns: titleimage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: titleimage.FieldID,
			},
		},
	}
	if ps := tiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tiu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   titleimage.EventTable,
			Columns: []string{titleimage.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   titleimage.EventTable,
			Columns: []string{titleimage.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{titleimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TitleImageUpdateOne is the builder for updating a single TitleImage entity.
type TitleImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TitleImageMutation
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (tiuo *TitleImageUpdateOne) SetEventID(id uuid.UUID) *TitleImageUpdateOne {
	tiuo.mutation.SetEventID(id)
	return tiuo
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (tiuo *TitleImageUpdateOne) SetNillableEventID(id *uuid.UUID) *TitleImageUpdateOne {
	if id != nil {
		tiuo = tiuo.SetEventID(*id)
	}
	return tiuo
}

// SetEvent sets the "event" edge to the Event entity.
func (tiuo *TitleImageUpdateOne) SetEvent(e *Event) *TitleImageUpdateOne {
	return tiuo.SetEventID(e.ID)
}

// Mutation returns the TitleImageMutation object of the builder.
func (tiuo *TitleImageUpdateOne) Mutation() *TitleImageMutation {
	return tiuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (tiuo *TitleImageUpdateOne) ClearEvent() *TitleImageUpdateOne {
	tiuo.mutation.ClearEvent()
	return tiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tiuo *TitleImageUpdateOne) Select(field string, fields ...string) *TitleImageUpdateOne {
	tiuo.fields = append([]string{field}, fields...)
	return tiuo
}

// Save executes the query and returns the updated TitleImage entity.
func (tiuo *TitleImageUpdateOne) Save(ctx context.Context) (*TitleImage, error) {
	var (
		err  error
		node *TitleImage
	)
	if len(tiuo.hooks) == 0 {
		node, err = tiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TitleImageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tiuo.mutation = mutation
			node, err = tiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tiuo.hooks) - 1; i >= 0; i-- {
			if tiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tiuo *TitleImageUpdateOne) SaveX(ctx context.Context) *TitleImage {
	node, err := tiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tiuo *TitleImageUpdateOne) Exec(ctx context.Context) error {
	_, err := tiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiuo *TitleImageUpdateOne) ExecX(ctx context.Context) {
	if err := tiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tiuo *TitleImageUpdateOne) sqlSave(ctx context.Context) (_node *TitleImage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   titleimage.Table,
			Columns: titleimage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: titleimage.FieldID,
			},
		},
	}
	id, ok := tiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TitleImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, titleimage.FieldID)
		for _, f := range fields {
			if !titleimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != titleimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tiuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   titleimage.EventTable,
			Columns: []string{titleimage.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   titleimage.EventTable,
			Columns: []string{titleimage.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TitleImage{config: tiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{titleimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
