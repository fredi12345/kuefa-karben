// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fredi12345/kuefa-karben/src/ent/comment"
	"github.com/fredi12345/kuefa-karben/src/ent/event"
	"github.com/fredi12345/kuefa-karben/src/ent/image"
	"github.com/fredi12345/kuefa-karben/src/ent/participant"
	"github.com/fredi12345/kuefa-karben/src/ent/predicate"
	"github.com/fredi12345/kuefa-karben/src/ent/titleimage"
	"github.com/google/uuid"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetLastModified sets the "last_modified" field.
func (eu *EventUpdate) SetLastModified(t time.Time) *EventUpdate {
	eu.mutation.SetLastModified(t)
	return eu
}

// SetTheme sets the "theme" field.
func (eu *EventUpdate) SetTheme(s string) *EventUpdate {
	eu.mutation.SetTheme(s)
	return eu
}

// SetStartingTime sets the "starting_time" field.
func (eu *EventUpdate) SetStartingTime(t time.Time) *EventUpdate {
	eu.mutation.SetStartingTime(t)
	return eu
}

// SetClosingTime sets the "closing_time" field.
func (eu *EventUpdate) SetClosingTime(t time.Time) *EventUpdate {
	eu.mutation.SetClosingTime(t)
	return eu
}

// SetStarter sets the "starter" field.
func (eu *EventUpdate) SetStarter(s string) *EventUpdate {
	eu.mutation.SetStarter(s)
	return eu
}

// SetMainDish sets the "main_dish" field.
func (eu *EventUpdate) SetMainDish(s string) *EventUpdate {
	eu.mutation.SetMainDish(s)
	return eu
}

// SetDessert sets the "dessert" field.
func (eu *EventUpdate) SetDessert(s string) *EventUpdate {
	eu.mutation.SetDessert(s)
	return eu
}

// SetDescription sets the "description" field.
func (eu *EventUpdate) SetDescription(s string) *EventUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// AddParticipantIDs adds the "participants" edge to the Participant entity by IDs.
func (eu *EventUpdate) AddParticipantIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddParticipantIDs(ids...)
	return eu
}

// AddParticipants adds the "participants" edges to the Participant entity.
func (eu *EventUpdate) AddParticipants(p ...*Participant) *EventUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddParticipantIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (eu *EventUpdate) AddCommentIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddCommentIDs(ids...)
	return eu
}

// AddComments adds the "comments" edges to the Comment entity.
func (eu *EventUpdate) AddComments(c ...*Comment) *EventUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCommentIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (eu *EventUpdate) AddImageIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddImageIDs(ids...)
	return eu
}

// AddImages adds the "images" edges to the Image entity.
func (eu *EventUpdate) AddImages(i ...*Image) *EventUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddImageIDs(ids...)
}

// SetTitleImageID sets the "title_image" edge to the TitleImage entity by ID.
func (eu *EventUpdate) SetTitleImageID(id uuid.UUID) *EventUpdate {
	eu.mutation.SetTitleImageID(id)
	return eu
}

// SetNillableTitleImageID sets the "title_image" edge to the TitleImage entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableTitleImageID(id *uuid.UUID) *EventUpdate {
	if id != nil {
		eu = eu.SetTitleImageID(*id)
	}
	return eu
}

// SetTitleImage sets the "title_image" edge to the TitleImage entity.
func (eu *EventUpdate) SetTitleImage(t *TitleImage) *EventUpdate {
	return eu.SetTitleImageID(t.ID)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearParticipants clears all "participants" edges to the Participant entity.
func (eu *EventUpdate) ClearParticipants() *EventUpdate {
	eu.mutation.ClearParticipants()
	return eu
}

// RemoveParticipantIDs removes the "participants" edge to Participant entities by IDs.
func (eu *EventUpdate) RemoveParticipantIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveParticipantIDs(ids...)
	return eu
}

// RemoveParticipants removes "participants" edges to Participant entities.
func (eu *EventUpdate) RemoveParticipants(p ...*Participant) *EventUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveParticipantIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (eu *EventUpdate) ClearComments() *EventUpdate {
	eu.mutation.ClearComments()
	return eu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (eu *EventUpdate) RemoveCommentIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveCommentIDs(ids...)
	return eu
}

// RemoveComments removes "comments" edges to Comment entities.
func (eu *EventUpdate) RemoveComments(c ...*Comment) *EventUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCommentIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (eu *EventUpdate) ClearImages() *EventUpdate {
	eu.mutation.ClearImages()
	return eu
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (eu *EventUpdate) RemoveImageIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveImageIDs(ids...)
	return eu
}

// RemoveImages removes "images" edges to Image entities.
func (eu *EventUpdate) RemoveImages(i ...*Image) *EventUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveImageIDs(ids...)
}

// ClearTitleImage clears the "title_image" edge to the TitleImage entity.
func (eu *EventUpdate) ClearTitleImage() *EventUpdate {
	eu.mutation.ClearTitleImage()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eu.defaults()
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() {
	if _, ok := eu.mutation.LastModified(); !ok {
		v := event.UpdateDefaultLastModified()
		eu.mutation.SetLastModified(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.Theme(); ok {
		if err := event.ThemeValidator(v); err != nil {
			return &ValidationError{Name: "theme", err: fmt.Errorf(`ent: validator failed for field "Event.theme": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Starter(); ok {
		if err := event.StarterValidator(v); err != nil {
			return &ValidationError{Name: "starter", err: fmt.Errorf(`ent: validator failed for field "Event.starter": %w`, err)}
		}
	}
	if v, ok := eu.mutation.MainDish(); ok {
		if err := event.MainDishValidator(v); err != nil {
			return &ValidationError{Name: "main_dish", err: fmt.Errorf(`ent: validator failed for field "Event.main_dish": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Dessert(); ok {
		if err := event.DessertValidator(v); err != nil {
			return &ValidationError{Name: "dessert", err: fmt.Errorf(`ent: validator failed for field "Event.dessert": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Description(); ok {
		if err := event.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Event.description": %w`, err)}
		}
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: event.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.LastModified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldLastModified,
		})
	}
	if value, ok := eu.mutation.Theme(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldTheme,
		})
	}
	if value, ok := eu.mutation.StartingTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldStartingTime,
		})
	}
	if value, ok := eu.mutation.ClosingTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldClosingTime,
		})
	}
	if value, ok := eu.mutation.Starter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldStarter,
		})
	}
	if value, ok := eu.mutation.MainDish(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldMainDish,
		})
	}
	if value, ok := eu.mutation.Dessert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldDessert,
		})
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldDescription,
		})
	}
	if eu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !eu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !eu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ImagesTable,
			Columns: []string{event.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !eu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ImagesTable,
			Columns: []string{event.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ImagesTable,
			Columns: []string{event.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TitleImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.TitleImageTable,
			Columns: []string{event.TitleImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: titleimage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TitleImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.TitleImageTable,
			Columns: []string{event.TitleImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: titleimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetLastModified sets the "last_modified" field.
func (euo *EventUpdateOne) SetLastModified(t time.Time) *EventUpdateOne {
	euo.mutation.SetLastModified(t)
	return euo
}

// SetTheme sets the "theme" field.
func (euo *EventUpdateOne) SetTheme(s string) *EventUpdateOne {
	euo.mutation.SetTheme(s)
	return euo
}

// SetStartingTime sets the "starting_time" field.
func (euo *EventUpdateOne) SetStartingTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetStartingTime(t)
	return euo
}

// SetClosingTime sets the "closing_time" field.
func (euo *EventUpdateOne) SetClosingTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetClosingTime(t)
	return euo
}

// SetStarter sets the "starter" field.
func (euo *EventUpdateOne) SetStarter(s string) *EventUpdateOne {
	euo.mutation.SetStarter(s)
	return euo
}

// SetMainDish sets the "main_dish" field.
func (euo *EventUpdateOne) SetMainDish(s string) *EventUpdateOne {
	euo.mutation.SetMainDish(s)
	return euo
}

// SetDessert sets the "dessert" field.
func (euo *EventUpdateOne) SetDessert(s string) *EventUpdateOne {
	euo.mutation.SetDessert(s)
	return euo
}

// SetDescription sets the "description" field.
func (euo *EventUpdateOne) SetDescription(s string) *EventUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// AddParticipantIDs adds the "participants" edge to the Participant entity by IDs.
func (euo *EventUpdateOne) AddParticipantIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddParticipantIDs(ids...)
	return euo
}

// AddParticipants adds the "participants" edges to the Participant entity.
func (euo *EventUpdateOne) AddParticipants(p ...*Participant) *EventUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddParticipantIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (euo *EventUpdateOne) AddCommentIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddCommentIDs(ids...)
	return euo
}

// AddComments adds the "comments" edges to the Comment entity.
func (euo *EventUpdateOne) AddComments(c ...*Comment) *EventUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCommentIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (euo *EventUpdateOne) AddImageIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddImageIDs(ids...)
	return euo
}

// AddImages adds the "images" edges to the Image entity.
func (euo *EventUpdateOne) AddImages(i ...*Image) *EventUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddImageIDs(ids...)
}

// SetTitleImageID sets the "title_image" edge to the TitleImage entity by ID.
func (euo *EventUpdateOne) SetTitleImageID(id uuid.UUID) *EventUpdateOne {
	euo.mutation.SetTitleImageID(id)
	return euo
}

// SetNillableTitleImageID sets the "title_image" edge to the TitleImage entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTitleImageID(id *uuid.UUID) *EventUpdateOne {
	if id != nil {
		euo = euo.SetTitleImageID(*id)
	}
	return euo
}

// SetTitleImage sets the "title_image" edge to the TitleImage entity.
func (euo *EventUpdateOne) SetTitleImage(t *TitleImage) *EventUpdateOne {
	return euo.SetTitleImageID(t.ID)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearParticipants clears all "participants" edges to the Participant entity.
func (euo *EventUpdateOne) ClearParticipants() *EventUpdateOne {
	euo.mutation.ClearParticipants()
	return euo
}

// RemoveParticipantIDs removes the "participants" edge to Participant entities by IDs.
func (euo *EventUpdateOne) RemoveParticipantIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveParticipantIDs(ids...)
	return euo
}

// RemoveParticipants removes "participants" edges to Participant entities.
func (euo *EventUpdateOne) RemoveParticipants(p ...*Participant) *EventUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveParticipantIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (euo *EventUpdateOne) ClearComments() *EventUpdateOne {
	euo.mutation.ClearComments()
	return euo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (euo *EventUpdateOne) RemoveCommentIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveCommentIDs(ids...)
	return euo
}

// RemoveComments removes "comments" edges to Comment entities.
func (euo *EventUpdateOne) RemoveComments(c ...*Comment) *EventUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCommentIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (euo *EventUpdateOne) ClearImages() *EventUpdateOne {
	euo.mutation.ClearImages()
	return euo
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (euo *EventUpdateOne) RemoveImageIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveImageIDs(ids...)
	return euo
}

// RemoveImages removes "images" edges to Image entities.
func (euo *EventUpdateOne) RemoveImages(i ...*Image) *EventUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveImageIDs(ids...)
}

// ClearTitleImage clears the "title_image" edge to the TitleImage entity.
func (euo *EventUpdateOne) ClearTitleImage() *EventUpdateOne {
	euo.mutation.ClearTitleImage()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	var (
		err  error
		node *Event
	)
	euo.defaults()
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() {
	if _, ok := euo.mutation.LastModified(); !ok {
		v := event.UpdateDefaultLastModified()
		euo.mutation.SetLastModified(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.Theme(); ok {
		if err := event.ThemeValidator(v); err != nil {
			return &ValidationError{Name: "theme", err: fmt.Errorf(`ent: validator failed for field "Event.theme": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Starter(); ok {
		if err := event.StarterValidator(v); err != nil {
			return &ValidationError{Name: "starter", err: fmt.Errorf(`ent: validator failed for field "Event.starter": %w`, err)}
		}
	}
	if v, ok := euo.mutation.MainDish(); ok {
		if err := event.MainDishValidator(v); err != nil {
			return &ValidationError{Name: "main_dish", err: fmt.Errorf(`ent: validator failed for field "Event.main_dish": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Dessert(); ok {
		if err := event.DessertValidator(v); err != nil {
			return &ValidationError{Name: "dessert", err: fmt.Errorf(`ent: validator failed for field "Event.dessert": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Description(); ok {
		if err := event.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Event.description": %w`, err)}
		}
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: event.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.LastModified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldLastModified,
		})
	}
	if value, ok := euo.mutation.Theme(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldTheme,
		})
	}
	if value, ok := euo.mutation.StartingTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldStartingTime,
		})
	}
	if value, ok := euo.mutation.ClosingTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldClosingTime,
		})
	}
	if value, ok := euo.mutation.Starter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldStarter,
		})
	}
	if value, ok := euo.mutation.MainDish(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldMainDish,
		})
	}
	if value, ok := euo.mutation.Dessert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldDessert,
		})
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldDescription,
		})
	}
	if euo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !euo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !euo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ImagesTable,
			Columns: []string{event.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !euo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ImagesTable,
			Columns: []string{event.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ImagesTable,
			Columns: []string{event.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TitleImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.TitleImageTable,
			Columns: []string{event.TitleImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: titleimage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TitleImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.TitleImageTable,
			Columns: []string{event.TitleImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: titleimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
