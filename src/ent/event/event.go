// Code generated by entc, DO NOT EDIT.

package event

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldLastModified holds the string denoting the last_modified field in the database.
	FieldLastModified = "last_modified"
	// FieldTheme holds the string denoting the theme field in the database.
	FieldTheme = "theme"
	// FieldStartingTime holds the string denoting the starting_time field in the database.
	FieldStartingTime = "starting_time"
	// FieldClosingTime holds the string denoting the closing_time field in the database.
	FieldClosingTime = "closing_time"
	// FieldStarter holds the string denoting the starter field in the database.
	FieldStarter = "starter"
	// FieldMainDish holds the string denoting the main_dish field in the database.
	FieldMainDish = "main_dish"
	// FieldDessert holds the string denoting the dessert field in the database.
	FieldDessert = "dessert"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeParticipants holds the string denoting the participants edge name in mutations.
	EdgeParticipants = "participants"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeImages holds the string denoting the images edge name in mutations.
	EdgeImages = "images"
	// EdgeTitleImage holds the string denoting the title_image edge name in mutations.
	EdgeTitleImage = "title_image"
	// Table holds the table name of the event in the database.
	Table = "events"
	// ParticipantsTable is the table that holds the participants relation/edge.
	ParticipantsTable = "participants"
	// ParticipantsInverseTable is the table name for the Participant entity.
	// It exists in this package in order to avoid circular dependency with the "participant" package.
	ParticipantsInverseTable = "participants"
	// ParticipantsColumn is the table column denoting the participants relation/edge.
	ParticipantsColumn = "event_participants"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "event_comments"
	// ImagesTable is the table that holds the images relation/edge.
	ImagesTable = "images"
	// ImagesInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ImagesInverseTable = "images"
	// ImagesColumn is the table column denoting the images relation/edge.
	ImagesColumn = "event_images"
	// TitleImageTable is the table that holds the title_image relation/edge.
	TitleImageTable = "events"
	// TitleImageInverseTable is the table name for the TitleImage entity.
	// It exists in this package in order to avoid circular dependency with the "titleimage" package.
	TitleImageInverseTable = "title_images"
	// TitleImageColumn is the table column denoting the title_image relation/edge.
	TitleImageColumn = "event_title_image"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldCreated,
	FieldLastModified,
	FieldTheme,
	FieldStartingTime,
	FieldClosingTime,
	FieldStarter,
	FieldMainDish,
	FieldDessert,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "events"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_title_image",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreated holds the default value on creation for the "created" field.
	DefaultCreated func() time.Time
	// DefaultLastModified holds the default value on creation for the "last_modified" field.
	DefaultLastModified func() time.Time
	// UpdateDefaultLastModified holds the default value on update for the "last_modified" field.
	UpdateDefaultLastModified func() time.Time
	// ThemeValidator is a validator for the "theme" field. It is called by the builders before save.
	ThemeValidator func(string) error
	// StarterValidator is a validator for the "starter" field. It is called by the builders before save.
	StarterValidator func(string) error
	// MainDishValidator is a validator for the "main_dish" field. It is called by the builders before save.
	MainDishValidator func(string) error
	// DessertValidator is a validator for the "dessert" field. It is called by the builders before save.
	DessertValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
