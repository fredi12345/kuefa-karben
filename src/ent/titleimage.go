// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/fredi12345/kuefa-karben/src/ent/event"
	"github.com/fredi12345/kuefa-karben/src/ent/titleimage"
	"github.com/google/uuid"
)

// TitleImage is the model entity for the TitleImage schema.
type TitleImage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TitleImageQuery when eager-loading is set.
	Edges             TitleImageEdges `json:"edges"`
	event_title_image *uuid.UUID
}

// TitleImageEdges holds the relations/edges for other nodes in the graph.
type TitleImageEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TitleImageEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TitleImage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case titleimage.FieldCreated:
			values[i] = new(sql.NullTime)
		case titleimage.FieldID:
			values[i] = new(uuid.UUID)
		case titleimage.ForeignKeys[0]: // event_title_image
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type TitleImage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TitleImage fields.
func (ti *TitleImage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case titleimage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ti.ID = *value
			}
		case titleimage.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				ti.Created = value.Time
			}
		case titleimage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field event_title_image", values[i])
			} else if value.Valid {
				ti.event_title_image = new(uuid.UUID)
				*ti.event_title_image = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the TitleImage entity.
func (ti *TitleImage) QueryEvent() *EventQuery {
	return (&TitleImageClient{config: ti.config}).QueryEvent(ti)
}

// Update returns a builder for updating this TitleImage.
// Note that you need to call TitleImage.Unwrap() before calling this method if this TitleImage
// was returned from a transaction, and the transaction was committed or rolled back.
func (ti *TitleImage) Update() *TitleImageUpdateOne {
	return (&TitleImageClient{config: ti.config}).UpdateOne(ti)
}

// Unwrap unwraps the TitleImage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ti *TitleImage) Unwrap() *TitleImage {
	tx, ok := ti.config.driver.(*txDriver)
	if !ok {
		panic("ent: TitleImage is not a transactional entity")
	}
	ti.config.driver = tx.drv
	return ti
}

// String implements the fmt.Stringer.
func (ti *TitleImage) String() string {
	var builder strings.Builder
	builder.WriteString("TitleImage(")
	builder.WriteString(fmt.Sprintf("id=%v", ti.ID))
	builder.WriteString(", created=")
	builder.WriteString(ti.Created.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TitleImages is a parsable slice of TitleImage.
type TitleImages []*TitleImage

func (ti TitleImages) config(cfg config) {
	for _i := range ti {
		ti[_i].config = cfg
	}
}
